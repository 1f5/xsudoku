package gdp.aufgabe22;

import java.util.*;

public class XSudoku {
    private final static int[] InvalidField = { -1, -1 };

    public static boolean isPermutation(int[] a) { // why do it easy, when you
						   // can do it complicated?
	int[] sort = new int[a.length];
	System.arraycopy(a, 0, sort, 0, a.length);
	Arrays.sort(sort);
	for (int i = 0; i < (a.length - 1); i++) {
	    if (!(sort[i + 1] > sort[i] || sort[i] == 0)) {
		return false;
	    }
	}
	return true;
    }

    public static boolean isPermutationRow(int[][] a, int row) {
	return isPermutation(a[row]);

    }

    public static boolean isPermutationCol(int[][] a, int col) {
	return isPermutation(getColumn(a, col));
    }
    
    private static int[] getColumn(int[][] a, int col) {
	int size = a[col].length;
	int[] column = new int[size];
	for (int i = 0; i < size; i++) {
	    int copy = a[i][col];
	    column[i] = copy;
	}
	return column;
    }

    public static boolean isPermutationDiagonal(int[][] a) {
	// return true;
	int[] diagonal0 = new int[9];
	int[] diagonal1 = new int[9];
	for (int i = 0; i < 9; i++) {
	    diagonal0[i] = a[i][i];
	    diagonal1[i] = a[i][8 - i];
	}
	return (isPermutation(diagonal0) && isPermutation(diagonal1));
    }

    public static boolean isPermutationMatrix(int[][] a) {
	for (int i = 0; i < a.length; i++) {
	    if (!isPermutationRow(a, i)) {
		/*
		 * Unnecessary to check further columns if the current one is
		 * not a palindrome
		 */
		return false;
	    }
	}
	for (int i = 0; i < (a[0].length); i++) {
	    if (!isPermutationCol(a, i)) {
		return false;
	    }
	}
	return true;
    }

    public static boolean isPermutationBlock(int[][] a, int minRow, int maxRow,
	    int minCol, int maxCol) {
	int[] block = new int[(maxRow - minRow) * (maxCol - minCol)];

	for (int sir = minRow, ti = 0; sir < maxRow; sir++) {
	    /*
	     * sir= source index row, ti=target index
	     */
	    for (int sic = minCol; sic < maxCol; sic++, ti++) {
		// sic=source index column
		int copy = a[sir][sic];
		block[ti] = copy;
	    }
	}
	return isPermutation(block);
    }

    public static boolean isValid(int[][] a) {
	boolean valid = true;

	if (!(isPermutationMatrix(a) && isPermutationDiagonal(a))) {
	    valid = false;
	} else {
	    for (int ir = 0; ir < 9; ir += 3) { // checks blocks
		for (int ic = 0; ic < 9; ic += 3) {
		    if (!isPermutationBlock(a, ir, ir + 3, ic, ic + 3)) {
			valid = false;
			break;
		    }
		}
	    }
	}
	return valid;
    }

    private static boolean isValidSudoku(int[][] a) {
	return (isValid(a) && Arrays.equals(getFreeField(a), InvalidField));
    }

    public static int[][] solve(int[][] a) {
	int[] field = { -1, -1 };
	ArrayList<int[]> possibleFields = new ArrayList<int[]>();

	if (!isValidSudoku(a)) {
	    while (!Arrays.equals(InvalidField, (field = getFreeField(a)))) { // find free fields
		for(int i=1; i<=9; i++) {
		    if(isNumberPossible(a, field, i)) {
			int[] possibleField=new int[3];
			possibleField[0]=field[0];
			possibleField[1]=field[1];
			possibleField[2]=i;
			possibleFields.add(possibleField);
		    }
		}
	    }
	    if (!possibleFields.isEmpty()) {
		a = generateSolution(possibleFields.toArray(new int[possibleFields.size()][3]), a);
	    } else {
		a = null;
	    }

	}
	return a;
    }

    private static int[][] generateSolution(int[][] possibleFields, int[][] a) {
	for (int pos = 0; pos < possibleFields.length; pos++) {
	    a[possibleFields[pos][0]][possibleFields[pos][1]]=possibleFields[pos][2];
	    if(isValidSudoku(a))
		return a;
	}
	return null;
    }
    
    private static boolean isNumberPossible(int[][] a, int[] coordinate, int value) {
	int row[] = a[coordinate[0]];
	int col[] = getColumn(a, coordinate[1]);
	boolean valid=true;
	for(int i=0;i<row.length;i++) {
	    if(row[i]==value) {
		valid=false;
		break;
	    }
	}
	for(int i=0;i<col.length;i++) {
	    if(col[i]==value) {
		valid=false;
		break;
	    }
	}
	return valid;
    }

    private static int[] getFreeField(int[][] a) {
	int[] field = { -1, -1 };
	for (int ix = 0; ix < a.length; ix++) {
	    for (int iy = 0; iy < a.length; iy++) {
		if (a[ix][iy] == 0) {
		    field[0] = ix;
		    field[1] = iy;
		    break;
		}
	    }
	}
	return field;
    }

    public static void main(String[] args) {
	int[][] a = // new int[9][9];
	{
		{ 1, 2, 3, 5, 0, 6, 4, 8, 9 },
		{ 7, 6, 9, 1, 0, 8, 5, 2, 3 },
		{ 4, 8, 5, 3, 0, 0, 6, 7, 1 },
		{ 6, 7, 1, 2, 5, 0, 8, 9, 4 },
		{ 2, 9, 4, 6, 8, 0, 1, 3, 5 },
		{ 3, 5, 8, 4, 1, 0, 7, 6, 2 },
		{ 8, 4, 7, 9, 2, 0, 3, 5, 6 },
		{ 9, 1, 6, 7, 3, 5, 2, 4, 8 },
		{ 5, 3, 2, 8, 6, 4, 9, 1, 7 } };
	a = solve(a);
	printsudoku(a);
    }

    private static void printsudoku(int[][] a) {
	for (int i = 0; i < a.length; i++) {
	    for (int ii = 0; ii < a[0].length; ii++) {
		if (ii == 3 || ii == 6)
		    System.out.print(" ");
		System.out.print(a[i][ii] + " ");
	    }
	    if (i == 2 || i == 5)
		System.out.println();
	    System.out.print("\n");
	}
    }

}
